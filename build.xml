<project xmlns:ivy="antlib:org.apache.ivy.ant"
         name="SigmaRest" default="all" basedir=".">

    <!--
    ===
    IVY
    ===
    -->

    <property name="ivy.install.version" value="2.5.1"/>
    <property name="ivy.home" value="${basedir}/.ivy"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <target name="check.for.ivy.jar">
        <available file="${ivy.jar.file}" property="ivy.present"/>
    </target>

    <target name="download-ivy" depends="check.for.ivy.jar" unless="ivy.present">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load Ivy here from Ivy home, in case the user has not already dropped
             it into Ant's lib dir (note that the latter copy will always take precedence).
             We will not fail as long as local lib dir exists (it may be empty) and
             Ivy is in at least one of Ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:retrieve/>
        <!--<ivy:report/>--> <!-- Expose Ivy's dep. report -->

        <path id="compile.classpath">
            <fileset dir="${basedir}/lib">
                <include name="*.jar"/>
            </fileset>
        </path>
        <path id="runtime.classpath">
            <path refid="compile.classpath"/>
        </path>
    </target>

    <!--
    ====
    INIT
    ====
    -->

    <property name="app.name" value="sigmarest"/>
    <property name="build.home" value="build"/>
    <property name="build.classes" value="${build.home}/classes"/>
    <property name="build.lib" value="${build.home}/lib"/>
    <property environment="env"/>
    <property name="git.home" value="${env.ONTOLOGYPORTAL_GIT}"/>
    <property name="tomcat.home" value="${env.CATALINA_HOME}"/>
    <property name="tptp.home" value="${git.home}/TPTP-ANTLR"/>
    <property name="sigma.home" value="${env.SIGMA_HOME}"/>
    <property name="kbs.home" value="${sigma.home}/KBs" />
    <property name="dist.home" value="${tomcat.home}/webapps"/>
    <property name="deploy.home" value="${dist.home}/${app.name}"/>
    <property name="dist.jar" value="${app.name}.jar"/>
    <property name="dist.war" value="${app.name}.war"/>

    <property name="javac.release" value="11"/>

    <echo message="CATALINA_HOME is set to = ${env.CATALINA_HOME}"/>
    <echo message="SIGMA_HOME is set to = ${env.SIGMA_HOME}"/>
    <echo message="SIGMA_SRC is set to = ${env.SIGMA_SRC}"/>
    <echo message="KBs_HOME is set to = ${kbs.home}" />
    <echo>Java Version via Ant: ${ant.java.version}</echo>
    <echo>Java Version System Prop: ${java.version}</echo>

    <path id="core.sourcepath">
        <pathelement path="src/com/articulate/sigma/rest"/>
    </path>

    <target name="init" depends="init-ivy">
        <condition property="jdk21+">
            <javaversion atleast="21"/>
        </condition>
        <fail message="Unsupported JDK version: ${ant.java.version}. Please use a Java Development Kit (JDK) version 21 or greater."
              unless="jdk21+">
        </fail>
        <condition property="nojdk">
            <contains string="${java.home}" substring="jdk"/>
        </condition>
        <fail message="Please install a Java Development Kit (JDK) version 21 or greater."
              unless="nojdk">
        </fail>
    </target>

    <!--
    =====
    BUILD
    =====
    -->

    <target name="sigma" depends="init">
        <ant antfile="../sigmakee/build.xml" inheritAll="false" target="all" />
        <copy todir="${basedir}/lib" file="${env.SIGMA_SRC}/build/sigmakee.jar" />
    </target>

    <target name="TPTP" depends="sigma">
        <echo message="SIGMA_HOME is set to = ${sigma.home}"/>
        <echo message="TPTP is set to = ${tptp.home}"/>
        <copy todir="${basedir}/lib" file="${tptp.home}/tptp.jar"/>
        <copy todir="${basedir}/lib" file="../SigmaUtils/sigmaUtils.jar"/>
    </target>

    <target name="compile" depends="TPTP" description="Compile the project and place in ${build.classes}.">
        <mkdir dir="${build.classes}"/>
        <javac destdir="${build.classes}"
               debug="on"
               optimize="on"
               deprecation="on"
               includeantruntime="false"
               classpathref="compile.classpath"
               release="${javac.release}">
            <src refid="core.sourcepath"/>
        </javac>
    </target>

    <!--
    ======
    DEPLOY
    ======
    -->

    <target name="dist" depends="compile" description="Create the *.war file and place in ${dist.home}.">
        <war warfile="${dist.home}/${dist.war}"
             webxml="web.xml">
            <metainf file="context.xml"/>
            <lib dir="${basedir}/lib">
                <exclude name="tomcat-servlet-api*"/>
            </lib>
            <classes dir="${build.classes}"/>
        </war>
        <jar destfile="${build.home}/${dist.jar}">
            <fileset dir="${build.classes}"/>
        </jar>
    </target>

    <target name="stop.tomcat" description="stop web application in tomcat">
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="'${tomcat.home}/bin/shutdown.sh'"/>
        </exec>
    </target>

    <target name="start.tomcat" description="start web application in tomcat">
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="'${tomcat.home}/bin/startup.sh'"/>
        </exec>
        <!--<antcall target="monitor.catalina.out"/>-->
    </target>

    <!--
    =====
    ADMIN
    =====
    -->

    <!-- target name="all" depends="dist, api_doc" -->
    <target name="all" depends="clean,dist">
        <tstamp>
            <format property="TODAY_US" pattern="yyyy-MM-dd HH:mm:ss:sss zzz" locale="en,US"/>
        </tstamp>
        <echo>the system date/time is ${TODAY_US}</echo>
    </target>
    <target name="clean" description="Delete old build, lib, dist and deployed web aritifacts">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.home}"/> <!-- avoid problems with package name changes by deleting everything -->
            <!-- Delete the old web code -->
            <fileset dir="${deploy.home}"/>
            <fileset dir="${tomcat.home}/work/Catalina/localhost/${app.name}"/>
            <!-- Prune out of date dependencies -->
            <fileset dir="${basedir}/lib">  <!-- keep ./lib -->
                <include name="*.jar"/>
            </fileset>
        </delete>
        <delete file="${dist.home}/${dist.war}"/>
    </target>
    <target name="delete.catalina.logs">
        <delete>
            <fileset dir="${tomcat.home}/logs">
                <include name="*.*"/>
            </fileset>
        </delete>
    </target>

</project>

